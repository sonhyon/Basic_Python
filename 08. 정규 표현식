[정규 표현식 살펴보기]
- 정규 표현식은 왜 필요한가?

[정규 표현식 시작하기]
- 정규 표현식의 기초, 메타 문자
# []문자 -문자 클래스
# .[dot]문자 -\n을 제외한 모든 문자
# *문자
# +문자
# {}문자와 ?문자

- 파이썬에서 정규 표현식을 지원하는 re모듈
import re
p = re.compile('ab*')

- 정규식을 이용한 문자열 검색
import re
p = re.compile('[a-z]+')

# match
m = p.match("python")
print(m)
m = match("3 python")
print(m)

# search
m = p.serach("python")
print(m)

m = p.search("3 python")
print(m)

# findall
result = p.findall("life is too short")
print(result)

# finditer
result = p.finditer("life is too short")
print(result)
for r in result: print(r)

- match 객체의 메서드
m = p.match("python")
m.group()
m.start()
m.end()
m.span()

m = p.search("3 python")
m.group()
m.start()
m.end()
m.span()

- 컴파일 옵션
# DOTALL, S
import re
p = re.compile('a.b')
m = p.match('a\nb')
print(m)

p = re.compile('a.b', re.DOTALL)
m = p.match('a\nb')
print(m)

# IGNORECASE, I
p = re.compile('[a-z]+', re.I)
p.match('python')
p.match('Python')
p.match('PYTHON')

# MULTILINE, M
import re
p = re.compile("^python\s\w+")

data = """python one
life is too short
python two
you need python
python three"""

print(p.findall(data))


import re
p = re.compile("^python\s\w+", re.MULTILINE)

data = """python one
life is too short
python two
you need python
python three"""

print(p.findall(data))
