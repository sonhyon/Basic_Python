📌 정규 표현식 살펴보기
🔹 정규 표현식은 왜 필요한가?
복잡한 문자열 검색과 치환을 간결하게 처리할 수 있음

문자열 패턴을 정의하여 유효성 검사, 필터링 등에 활용

🔹 정규 표현식의 기초 - 메타 문자
| 메타문자    | 설명                        
| ------- | ------------------------- 
| `[]`    | 문자 클래스, `[^]`는 not        
| `.`     | 줄바꿈(\n)을 제외한 모든 문자        
| `*`     | 앞 문자가 0번 이상 반복            
| `+`     | 앞 문자가 1번 이상 반복            
| `{m,n}` | m\~n번 반복                  
| `?`     | 0번 또는 1번 반복 (또는 비탐욕적 수량자) 

🔹 파이썬의 re 모듈
import re
p = re.compile('ab*')

🔹 정규식을 이용한 문자열 검색
p = re.compile('[a-z]+')

-match
m = p.match("python")
print(m)
# m = match("3 python")  # 오류: match는 re.match가 아님

-search
m = p.search("python")
m = p.search("3 python")
print(m)

-findall
result = p.findall("life is too short")
print(result)

-finditer
result = p.finditer("life is too short")
for r in result:
    print(r)

🔹 match 객체의 메서드
m = p.search("3 python")
print(m.group())
print(m.start(), m.end())
print(m.span())

🔹 컴파일 옵션
-DOTALL
p = re.compile('a.b', re.DOTALL)
print(p.match('a\nb'))

-IGNORECASE
p = re.compile('[a-z]+', re.IGNORECASE)
print(p.match('PYTHON'))

-MULTILINE
data = """python one
life is too short
python two
you need python
python three"""

p = re.compile("^python\s\w+", re.MULTILINE)
print(p.findall(data))

-VERBOSE
공백과 주석을 허용하는 옵션으로, 복잡한 정규식 작성 시 유용함

| 기호   | 의미         
| ---- | ---------- 
| `^`  | 문자열 시작     
| `$`  | 문자열 끝      
| `\A` | 전체 문자열의 시작 
| `\Z` | 전체 문자열의 끝  
| `\b` | 단어 경계      
| `\B` | 단어 경계가 아님  

p = re.compile(r'\bclass\b')
print(p.search('no class at all'))

🔹 그룹핑
p = re.compile('(ABC)+')
m = p.search('ABCABCABC OK?')
print(m.group())

-그룹 번호로 접근
p = re.compile(r"(\w+)\s+(\d+[-]\d+[-]\d+)")
m = p.search("park 010-1234-1234")
print(m.group(1), m.group(2))

-이름 있는 그룹
p = re.compile(r"(?P<name>\w+)\s+(?P<phone>\d+[-]\d+[-]\d+)")
m = p.search("park 010-1234-1234")
print(m.group("name"))

-재참조
p = re.compile(r'(\b\w+)\s+\1')
print(p.search('Paris in the the spring').group())

🔹 전방 탐색
-일반
p = re.compile(".+:")
print(p.search("http://google.com").group())

-긍정형 전방탐색
p = re.compile(".+(?=:)")
print(p.search("http://google.com").group())

-부정형 전방탐색
# 예: 숫자 앞이 영문자가 아닌 경우만 찾기
p = re.compile(r"(?<![a-zA-Z])\d+")

🔹 문자열 바꾸기
p = re.compile('blue|white|red')
print(p.sub('colour', 'blue socks and red shoes'))

-치환 횟수 제한
print(p.sub('colour', 'blue socks and red shoes', count=1))

-치환 결과와 횟수 반환 (subn)
print(p.subn('colour', 'blue socks and red shoes'))

-그룹 참조 치환
p = re.compile(r"(?P<name>\w+)\s+(?P<phone>\d+[-]\d+[-]\d+)")
print(p.sub("\g<phone> \g<name>", "park 010-1234-1234"))

-함수 기반 치환
def hexrepl(match):
    return hex(int(match.group()))

p = re.compile(r'\d+')
print(p.sub(hexrepl, 'Call 65490 for printing, 49152 for user code.'))

🔹 Greedy vs Non-Greedy
s = '<html><head><title>Title</title>'

print(re.match('<.*>', s))        # Greedy (최대한 매칭)
print(re.match('<.*?>', s))       # Non-Greedy (가능한 적게)
