파이썬 함수, 입출력, 파일처리 정리
1. 함수 형태 (입력값과 리턴값에 따른)

# 일반 함수 (입력값, 리턴값 모두 있음)
def add(a, b):
    result = a + b
    return result

# 입력값 없는 함수
def say():
    return 'hi'

# 리턴값 없는 함수
def add(a, b):
    print("%d, %d의 합은 %d입니다" % (a, b, a + b))

# 입력값과 리턴값 모두 없는 함수
def say():
    print('hi')

2. 매개변수 지정해 호출하기
def sub(a, b):
    return a - b

result = sub(a=7, b=3)
print(result)  # 4

3. 입력값 개수가 가변적일 때
# *args : 여러 개의 입력값을 튜플로 받음
def add_many(*args):
    result = 0
    for i in args:
        result += i
    return result

# 매개변수와 *args 함께 사용
def add_mul(choice, *args):
    if choice == "add":
        result = 0
        for i in args:
            result += i
    elif choice == "mul":
        result = 1
        for i in args:
            result *= i
    return result

4. 키워드 매개변수 (**kwargs)
def print_kwargs(**kwargs):
    print(kwargs)

print_kwargs(a=1, b=2)  # {'a': 1, 'b': 2}

5. 함수의 리턴값은 항상 하나
def add_and_mul(a, b):
    return a + b, a * b  # 튜플 (합, 곱) 반환

result = add_and_mul(3, 4)
print(result)  # (7, 12)

6. return 단독 사용: 함수 즉시 종료
def say_nick(nick):
    if nick == "바보":
        return  # 함수 종료
    print("나의 별명은 %s입니다" % nick)

7. 매개변수 초깃값 지정하기 (기본값)
def say_myself(name, age, man=True):
    print("나의 이름은 %s입니다" % name)
    print("나이는 %d살입니다" % age)
    if man:
        print("남자입니다")
    else:
        print("여자입니다")

8. 함수 안 변수와 함수 밖 변수의 관계
a = 1

def vartest(a):
    a = a + 1

vartest(a)
print(a)  # 1, 함수 안 변수는 함수 밖 변수와 별개

9. 함수 밖 변수 변경 방법
9-1. return 사용하기
a = 1

def vartest(a):
    a = a + 1
    return a

a = vartest(a)
print(a)  # 2

9-2. global 키워드 사용하기
a = 1

def vartest():
    global a
    a = a + 1

vartest()
print(a)  # 2

10. lambda 함수 (익명함수)
add = lambda a, b: a + b
result = add(3, 4)
print(result)  # 7

11. 사용자 입력(Input)과 출력(Print)
a = input()
number = input("숫자를 입력하세요: ")

print("Life" "is" "too short")  # 문자열 자동 연결
print("Life" + "is" + "too short")  # 문자열 덧셈

print("Life", "is", "too short")  # 띄어쓰기 포함 출력

for i in range(10):
    print(i, end=' ')  # 한 줄에 출력, 공백으로 구분

12. 파일 읽고 쓰기
12-1. 파일 열기 모드
'r' : 읽기
'w' : 쓰기(새로 생성 또는 덮어쓰기)
'a' : 추가 모드

12-2. 파일 생성 및 쓰기
f = open("새파일.txt", 'w')
f.close()

f = open("C:/doit/새파일.txt", 'w')
for i in range(1, 11):
    data = "%d번째 줄입니다.\n" % i
    f.write(data)
f.close()

12-3. 파일 읽기 (한 줄씩)
f = open("C:/doit/새파일.txt", 'r')
line = f.readline()
print(line)
f.close()

12-4. 파일 읽기 (모든 줄 반복)
f = open("C:/doit/새파일.txt", 'r')
while True:
    line = f.readline()
    if not line:
        break
    print(line, end='')
f.close()

12-5. 파일 읽기 (리스트로)
f = open("C:/doit/새파일.txt", 'r')
lines = f.readlines()
for line in lines:
    line = line.strip()  # 줄바꿈 제거
    print(line)
f.close()

12-6. 파일 전체 읽기
f = open("C:/doit/새파일.txt", 'r')
data = f.read()
print(data)
f.close()

12-7. 파일에 새로운 내용 추가하기
f = open("C:/doit/새파일.txt", 'a')
for i in range(11, 20):
    data = "%d번째 줄입니다\n" % i
    f.write(data)
f.close()

12-8. with문과 함께 사용하기 (자동으로 파일 닫음)
with open("foo.txt", "w") as f:
    f.write("Life is too short, you need python")

13. sys 모듈을 이용한 프로그램 입출력
import sys
args = sys.argv[1:]
for i in args:
    print(i)

import sys
args = sys.argv[1:]
for i in args:
    print(i.upper(), end=' ')
