[파이썬 클래스 & 객체지향]
-기본 클래스 구조
class Calculator:
    def __init__(self):
        self.result = 0
    def add(self, num):
        self.result += num
        return self.result

cal1 = Calculator()
print(cal1.add(3))  # 3

-사칙연산 클래스 예제
class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second

    def add(self):
        return self.first + self.second

    def sub(self):
        return self.first - self.second

    def mul(self):
        return self.first * self.second

    def div(self):
        return self.first / self.second

a = FourCal()
a.setdata(4, 2)
print(a.add())  # 6
print(a.mul())  # 8

-생성자 __init__
class FourCal:
    def __init__(self, first, second):
        self.first = first
        self.second = second

a = FourCal(4, 2)
print(a.add())

-상속 & 메서드 오버라이딩
class MoreFourCal(FourCal):
    def pow(self):
        return self.first ** self.second

class SafeFourCal(FourCal):
    def div(self):
        if self.second == 0:
            return 0
        else:
            return self.first / self.second

a = SafeFourCal(4, 0)
print(a.div())  # 0

-클래스 변수와 인스턴스 변수
class Family:
    lastname = '김'  # 클래스 변수

print(Family.lastname)  # '김'

fam = Family()
fam.lastname = '박'  # 인스턴스 변수 (객체별 별도 저장)
print(fam.lastname)  # '박'
print(Family.lastname)  # '김'


[모듈과 패키지]
-모듈 만들기 및 불러오기
mod1.py에 함수 정의
불러오기

import mod1
print(mod1.add(3, 4))

from mod1 import add, sub
print(add(3, 4))

if __name__ == "__main__":
직접 실행 시에만 실행되는 코드 작성용
if __name__ == "__main__":
    print("직접 실행되었습니다.")

-다른 디렉터리에 있는 모듈 불러오기
import sys
sys.path.append("C:/doit/mymod")
import mod2

-패키지 구조
game/
  __init__.py
  sound/
    __init__.py
    echo.py
  graphic/
    __init__.py
    render.py
(__init__.py는 패키지 초기화 파일로, 패키지 초기화 코드, 변수, 함수, 모듈 import 등을 작성)


[예외 처리]
-기본 try-except
try:
    4 / 0
except ZeroDivisionError:
    print("0으로 나눌 수 없습니다")

-여러 예외 처리
try:
    a = [1, 2]
    print(a[3])
    4 / 0
except ZeroDivisionError:
    print("0으로 나눌 수 없습니다")
except IndexError:
    print("인덱싱할 수 없습니다")

-예외 발생시키기 (raise)
class MyError(Exception):
    pass

def say_nick(nick):
    if nick == '바보':
        raise MyError("허용되지 않는 별명입니다")
    print(nick)

try:
    say_nick("천사")
    say_nick("바보")
except MyError as e:
    print(e)


[내장 함수 주요 정리]
abs(x): 절대값
all(iterable): 모든 요소가 참이면 True
any(iterable): 하나라도 참이면 True
chr(i): 유니코드 정수 → 문자
dir(obj): 객체의 변수와 함수 리스트
divmod(a, b): (몫, 나머지) 튜플 반환
enumerate(iterable): 인덱스 포함 반복자 반환
eval(str): 문자열 코드 실행 결과 반환
filter(func, iterable): 함수 조건 만족하는 요소 필터링
hex(x): 16진수 문자열
id(obj): 객체 고유 주소값
input(): 사용자 입력 받기
int(x): 정수 변환
isinstance(obj, class): 객체가 특정 클래스인지 검사
len(obj): 길이 반환
list(iterable): 리스트 변환
map(func, iterable): 함수 적용 반복자 반환
max(iterable), min(iterable): 최대, 최소
oct(x): 8진수 문자열
ord(c): 문자 → 유니코드 정수
pow(x, y): x의 y제곱
range(): 숫자 범위 생성
round(x): 반올림
sorted(iterable): 정렬된 리스트 반환
str(obj): 문자열 변환
sum(iterable): 합계
tuple(iterable): 튜플 변환
type(obj): 객체 타입 반환
zip(*iterables): 여러 반복자 묶기


[표준 라이브러리 주요 예]
-datetime
import datetime

day1 = datetime.date(2021, 12, 14)
day2 = datetime.date(2023, 4, 5)

diff = day2 - day1
print(diff.days)  # 일수 차이
print(day1.weekday())  # 요일 (월=0)
print(day1.isoweekday())  # 요일 (월=1)

-time
time.time(), time.localtime(), time.sleep() 등

-math
math.gcd(x, y): 최대공약수
math.lcm(x, y): 최소공배수

-os
os.environ: 환경변수
os.chdir(path): 작업 디렉터리 변경
os.getcwd(): 현재 작업 디렉터리 반환
os.system(cmd): 시스템 명령 실행


[외부 라이브러리 및 pip]

설치: pip install package_name
제거: pip uninstall package_name
특정 버전 설치: pip install package_name==1.0
업그레이드: pip install --upgrade package_name
설치 목록 확인: pip list
