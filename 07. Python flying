[파이썬과 유니코드]
#최초의 문자 셋, 아스키코드
#유니코드의 등장
#유니코드로 문자열 다루기
- 인코딩하기
a = "Life is too short"
b = a.encode('utf-8')
b

a = "한글"
a.encode("ascii")

a = "한글"
a.encode('euc-kr')
a.encode('utf-8')

- 디코딩하기
a = '한글'
b = a.encode('euc-kr')
b.decode('euc-kr')

b.decode('utf-8')

- 입출력과 인코딩
1. euc-kr로 작성된 파일 읽기
with open('euc-kr.txt', encoding = 'euc-kr') as f:
  data = f.read()

2. unicode 문자열로 프로그램 수행하기
data = data + "\n" + "추가 문자열"

3. euc-kr로 수정된 문자열 저장하기
with open('euc-kr.txt', encoding = 'euc-kr', mode = 'w') as f:
  f.write(data)

- 소스 코드의 인코딩


[클로저와 데코레이터]
- 클로저란?
class Mul:
  def __init__(self, m):
    self.m = m
  def mul(self, n):
    return self.m * n

if __name__ == "__main__:
  mul3 = Mul(3)
  mul5 = Mul(5)

  print(mul3.mul(10))
  print(mul5.mul(10))


class Mul:
  def __init__(self, m):
    self.m = m
  def __call__(self, n):
    return self.m * n

if __nmae__ == "__main__":
  mul3 = Mul(3)
  mul5 = Mul(5)

  print(mul3(10))
  print(mul5(10))


def mul(m):
  def wrapper(n):
    return m * n
  return wrapper

if __name__ == "__main__":
  mul3 = mul(3)
  mul5 = mul(5)

  print(mul3(10))
  print(mult(10))

- 데코레이터란?
import time

def elapsed(original_func):
  def wrapper():
    start = time.time()
    result = original_func()
    end = time.time()
    print("함수 수행 시간: %f초" % (end - start))
    return result
  return wrapper

def myfunc():
  print("함수가 실행됩니다")

decorated_myfunc = elapsed (myfunc)
decorated_myfunc()


import time

def elapsed(original_func):
  def wrapper():
    start = time.time()
    result = original_func()
    end = time.time()
    print("함수 수행 시간: %f초" % (end = start))
    return result
  return wrapper

@elapsed
def myfunc():
  print("함수가 실행됩니다")

myfunc()
