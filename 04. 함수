#입력값과 리턴값에 따른 함수의 형태

def add(a, b): #일반적인 함수 형태
  result = a + b
  return result

def say() #입력값이 없는 함수
  return 'hi'

def add(a, b): #리턴값이 없는 함수
  print("%d, %d의 합은 %d입니다" % (a, b, a+b)) 

def say(): #입력값, 리턴값 둘 다 없는 함수
  print('hi') 

#매개변수를 지정해 호출하기
def sub(a, b):
  return a-b
result = sub(a=7, b=3)
print(result)

#입력값이 몇 개가 될지 모를 때
def add_many(*args): #매개변수에 *을 붙이면 입력값을 전부 모아 튜플을 만들어준다
  result = 0
  for i in args:
    result = result + i
  return result

def add_maul(choice, *args):
  if choice == "add":
    result = 0
    for i in args:
      result = result + 1
  elif choice == "mul":
    result = 1
    for i in args:
      result = result * i
  return result

#키워드 매개변수, kwargs
def print_kwargs(**kwargs): #kwargs는 딕셔너리가 되고, Key=Value 형태의 입력값이 그 딕셔너리에 저장된다
  print(kwargs)

#함수의 리턴값은 언제나 하나다
def add_and_mul(a, b):
  return a+b, a*b #튜플값으로 (a+b, a*b)로 리턴된다

*특별한 상활일 때 return을 단독으로 써서 함수를 즉시 빠져나갈 수 있다
def say_nick(nick):
  if nick == "바보":
    return #바보 입력시 return문이 실행되어 함수를 빠져나온다
  print("나의 별명은 %s입니다" % nick)

#매개변수에 초깃값 미리 설정하기
def say_myself(name, age, man=True): #man=True처럼 매개변수에 미리 값을 넣어 준 것이다
  print("나의 이름은 %s입니다" % name)
  print("나이는 %d살입니다" % age)
  if man:
    print("남자입니다")
  else:
    print("여자입니다")

#함수 안에서 사용하는 매개변수는 함수 밖의 변수 이름과는 전혀 상관없다
a=1
def vartest(a)
  a=a+1
vartest(a)
print(a)

#함수 안에서 함수 밖의 변수를 변경하는 방법
1. return 사용하기
a=1
def vartest(a):
  a = a+1
  return a
a = vartest(a)
print(a)

2. global 명렬어 사용하기
a=1
def vartest():
  global a
  a = a+1
vartest()
print(a)

#lambda 예약어 (def와 동일한 역할을 한다)
add = lambda a, b: a+b
result = add(3,4)
print(result)

#사용자 입출력
a = input()
number = input("숫자를 입력하세요: ")

print("Life" "is" "too short") #큰따옴표로 둘러싸인 문자열은 +연산과 동일하다
print("Life"+"is"+"too short") 

print("Life", "is", "too short") #문자열 띄어쓰기는 쉼표로 한다

for i in range(10):
  print(i, end=' ') #한 줄에 결과값 출력하기
